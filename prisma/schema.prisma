generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  UPI
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole @default(USER)
  image         String    @default("https://res.cloudinary.com/dlriuadjv/image/upload/v1725295816/rzfzi0cue3byjl5krckh.jpg")
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  bookings      Booking[]

  hotels           Hotel[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model Hotel {
  id       String   @id @default(uuid())
  name     String
  address  String
  country  String
  city     String
  state    String
  zip      String
  phone    String
  email    String
  website  String?
  description String?
  image    String[]

  roomType    RoomType[]
  rates    Rate[]
  bookings Booking[]
  inventory Inventory[]

  ownerId  String   // The user who created the hotel
  owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomType {
  id       String   @id @default(uuid())
  name     String

  hotelId  String
  hotel    Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  rates    Rate[]
  inventory Inventory[]
  bookings Booking[]
  amenities RoomTypeAmenities[]
}

model Amenities {
  id       String   @id @default(uuid())
  amenityType  String
  value     String

  roomTypeAmenities RoomTypeAmenities[]
}

model RoomTypeAmenities {
  id          String   @id @default(uuid())
  roomTypeId  String
  roomType    RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  amenityId   String
  amenity     Amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
}

model Rate {
  id          String   @id @default(uuid())
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomTypeId  String
  roomType    RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  rate        Float
  date        DateTime
}

model Inventory {
  id            String   @id @default(uuid())
  hotelId       String
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomTypeId    String
  roomType      RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  date          DateTime
  totalRooms    Int
  availableRooms Int
}



model Booking {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId      String
  roomType    RoomType     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Float
  payment     Payment?
  status      BookingStatus
  offerCode   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  offer       Offer?   @relation(fields: [offerCode], references: [code])

  @@unique([roomId, checkIn, checkOut]) // Ensure no double booking for the same room at the same time
  @@index([hotelId])  // Index to optimize queries based on hotel
}


model Payment {
  id          String   @id @default(uuid())
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount      Float
  paymentMethod PaymentMethod
  status      PaymentStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Offer {
  id          String   @id @default(uuid())
  code        String   @unique
  discount    Float
  validFrom   DateTime
  validTo     DateTime
  bookings    Booking[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id       String   @id @default(uuid())
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id       String   @id @default(uuid())
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id       String   @id @default(uuid())
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id       String   @id @default(uuid())

  userId    String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}